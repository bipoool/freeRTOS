
helloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000164c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001758  08001758  00011758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001780  08001780  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001780  08001780  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001780  08001780  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001780  08001780  00011780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001784  08001784  00011784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001794  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001794  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008412  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015df  00000000  00000000  00028447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00029a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002a358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016728  00000000  00000000  0002abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096e7  00000000  00000000  000412f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e81  00000000  00000000  0004a9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce860  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002578  00000000  00000000  000ce8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001740 	.word	0x08001740

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001740 	.word	0x08001740

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f978 	bl	8000444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81a 	bl	800018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f854 	bl	8000204 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000162:	4809      	ldr	r0, [pc, #36]	; (8000188 <main+0x3c>)
 8000164:	f000 fc28 	bl	80009b8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000168:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800016c:	f000 f99c 	bl	80004a8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000170:	2200      	movs	r2, #0
 8000172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000176:	4804      	ldr	r0, [pc, #16]	; (8000188 <main+0x3c>)
 8000178:	f000 fc1e 	bl	80009b8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800017c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000180:	f000 f992 	bl	80004a8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000184:	e7ea      	b.n	800015c <main+0x10>
 8000186:	bf00      	nop
 8000188:	40011000 	.word	0x40011000

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b090      	sub	sp, #64	; 0x40
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0318 	add.w	r3, r7, #24
 8000196:	2228      	movs	r2, #40	; 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f001 fac8 	bl	8001730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]
 80001ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ae:	2302      	movs	r3, #2
 80001b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b2:	2301      	movs	r3, #1
 80001b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b6:	2310      	movs	r3, #16
 80001b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ba:	2300      	movs	r3, #0
 80001bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 fc10 	bl	80009e8 <HAL_RCC_OscConfig>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ce:	f000 f85f 	bl	8000290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d2:	230f      	movs	r3, #15
 80001d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 fe7c 	bl	8000ee8 <HAL_RCC_ClockConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001f6:	f000 f84b 	bl	8000290 <Error_Handler>
  }
}
 80001fa:	bf00      	nop
 80001fc:	3740      	adds	r7, #64	; 0x40
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020a:	f107 0308 	add.w	r3, r7, #8
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <MX_GPIO_Init+0x60>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a11      	ldr	r2, [pc, #68]	; (8000264 <MX_GPIO_Init+0x60>)
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6193      	str	r3, [r2, #24]
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <MX_GPIO_Init+0x60>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	f003 0310 	and.w	r3, r3, #16
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000236:	480c      	ldr	r0, [pc, #48]	; (8000268 <MX_GPIO_Init+0x64>)
 8000238:	f000 fbbe 	bl	80009b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800023c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000240:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000242:	2301      	movs	r3, #1
 8000244:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024a:	2302      	movs	r3, #2
 800024c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800024e:	f107 0308 	add.w	r3, r7, #8
 8000252:	4619      	mov	r1, r3
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <MX_GPIO_Init+0x64>)
 8000256:	f000 fa2b 	bl	80006b0 <HAL_GPIO_Init>

}
 800025a:	bf00      	nop
 800025c:	3718      	adds	r7, #24
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000
 8000268:	40011000 	.word	0x40011000

0800026c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d101      	bne.n	8000282 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800027e:	f000 f8f7 	bl	8000470 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40000800 	.word	0x40000800

08000290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000294:	b672      	cpsid	i
}
 8000296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000298:	e7fe      	b.n	8000298 <Error_Handler+0x8>
	...

0800029c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <HAL_MspInit+0x5c>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	4a14      	ldr	r2, [pc, #80]	; (80002f8 <HAL_MspInit+0x5c>)
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	6193      	str	r3, [r2, #24]
 80002ae:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <HAL_MspInit+0x5c>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	60bb      	str	r3, [r7, #8]
 80002b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <HAL_MspInit+0x5c>)
 80002bc:	69db      	ldr	r3, [r3, #28]
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <HAL_MspInit+0x5c>)
 80002c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002c4:	61d3      	str	r3, [r2, #28]
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <HAL_MspInit+0x5c>)
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <HAL_MspInit+0x60>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	4a04      	ldr	r2, [pc, #16]	; (80002fc <HAL_MspInit+0x60>)
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40021000 	.word	0x40021000
 80002fc:	40010000 	.word	0x40010000

08000300 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b08c      	sub	sp, #48	; 0x30
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000310:	2200      	movs	r2, #0
 8000312:	6879      	ldr	r1, [r7, #4]
 8000314:	201e      	movs	r0, #30
 8000316:	f000 f9a0 	bl	800065a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800031a:	201e      	movs	r0, #30
 800031c:	f000 f9b9 	bl	8000692 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <HAL_InitTick+0x9c>)
 8000322:	69db      	ldr	r3, [r3, #28]
 8000324:	4a1d      	ldr	r2, [pc, #116]	; (800039c <HAL_InitTick+0x9c>)
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	61d3      	str	r3, [r2, #28]
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <HAL_InitTick+0x9c>)
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	f003 0304 	and.w	r3, r3, #4
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000338:	f107 0210 	add.w	r2, r7, #16
 800033c:	f107 0314 	add.w	r3, r7, #20
 8000340:	4611      	mov	r1, r2
 8000342:	4618      	mov	r0, r3
 8000344:	f000 ff38 	bl	80011b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000348:	f000 ff22 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
 800034c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800034e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000350:	4a13      	ldr	r2, [pc, #76]	; (80003a0 <HAL_InitTick+0xa0>)
 8000352:	fba2 2303 	umull	r2, r3, r2, r3
 8000356:	0c9b      	lsrs	r3, r3, #18
 8000358:	3b01      	subs	r3, #1
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <HAL_InitTick+0xa4>)
 800035e:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <HAL_InitTick+0xa8>)
 8000360:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <HAL_InitTick+0xa4>)
 8000364:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000368:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <HAL_InitTick+0xa4>)
 800036c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <HAL_InitTick+0xa4>)
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <HAL_InitTick+0xa4>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800037c:	4809      	ldr	r0, [pc, #36]	; (80003a4 <HAL_InitTick+0xa4>)
 800037e:	f000 ff69 	bl	8001254 <HAL_TIM_Base_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d104      	bne.n	8000392 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000388:	4806      	ldr	r0, [pc, #24]	; (80003a4 <HAL_InitTick+0xa4>)
 800038a:	f000 ffbb 	bl	8001304 <HAL_TIM_Base_Start_IT>
 800038e:	4603      	mov	r3, r0
 8000390:	e000      	b.n	8000394 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000392:	2301      	movs	r3, #1
}
 8000394:	4618      	mov	r0, r3
 8000396:	3730      	adds	r7, #48	; 0x30
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40021000 	.word	0x40021000
 80003a0:	431bde83 	.word	0x431bde83
 80003a4:	20000028 	.word	0x20000028
 80003a8:	40000800 	.word	0x40000800

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <NMI_Handler+0x4>

080003b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <HardFault_Handler+0x4>

080003b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <MemManage_Handler+0x4>

080003be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <BusFault_Handler+0x4>

080003c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <UsageFault_Handler+0x4>

080003ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
	...

080003d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80003dc:	4802      	ldr	r0, [pc, #8]	; (80003e8 <TIM4_IRQHandler+0x10>)
 80003de:	f000 ffe3 	bl	80013a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000028 	.word	0x20000028

080003ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003fa:	490d      	ldr	r1, [pc, #52]	; (8000430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003fc:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000400:	e002      	b.n	8000408 <LoopCopyDataInit>

08000402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000406:	3304      	adds	r3, #4

08000408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800040c:	d3f9      	bcc.n	8000402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000410:	4c0a      	ldr	r4, [pc, #40]	; (800043c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000414:	e001      	b.n	800041a <LoopFillZerobss>

08000416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000418:	3204      	adds	r2, #4

0800041a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800041c:	d3fb      	bcc.n	8000416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800041e:	f7ff ffe5 	bl	80003ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000422:	f001 f961 	bl	80016e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f7ff fe91 	bl	800014c <main>
  bx lr
 800042a:	4770      	bx	lr
  ldr r0, =_sdata
 800042c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000430:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000434:	08001788 	.word	0x08001788
  ldr r2, =_sbss
 8000438:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800043c:	20000074 	.word	0x20000074

08000440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000440:	e7fe      	b.n	8000440 <ADC1_2_IRQHandler>
	...

08000444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <HAL_Init+0x28>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <HAL_Init+0x28>)
 800044e:	f043 0310 	orr.w	r3, r3, #16
 8000452:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000454:	2003      	movs	r0, #3
 8000456:	f000 f8f5 	bl	8000644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800045a:	200f      	movs	r0, #15
 800045c:	f7ff ff50 	bl	8000300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000460:	f7ff ff1c 	bl	800029c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40022000 	.word	0x40022000

08000470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <HAL_IncTick+0x1c>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <HAL_IncTick+0x20>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4413      	add	r3, r2
 8000480:	4a03      	ldr	r2, [pc, #12]	; (8000490 <HAL_IncTick+0x20>)
 8000482:	6013      	str	r3, [r2, #0]
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	20000008 	.word	0x20000008
 8000490:	20000070 	.word	0x20000070

08000494 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  return uwTick;
 8000498:	4b02      	ldr	r3, [pc, #8]	; (80004a4 <HAL_GetTick+0x10>)
 800049a:	681b      	ldr	r3, [r3, #0]
}
 800049c:	4618      	mov	r0, r3
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	20000070 	.word	0x20000070

080004a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004b0:	f7ff fff0 	bl	8000494 <HAL_GetTick>
 80004b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004c0:	d005      	beq.n	80004ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <HAL_Delay+0x44>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	461a      	mov	r2, r3
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	4413      	add	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004ce:	bf00      	nop
 80004d0:	f7ff ffe0 	bl	8000494 <HAL_GetTick>
 80004d4:	4602      	mov	r2, r0
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d8f7      	bhi.n	80004d0 <HAL_Delay+0x28>
  {
  }
}
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000008 	.word	0x20000008

080004f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f003 0307 	and.w	r3, r3, #7
 80004fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <__NVIC_SetPriorityGrouping+0x44>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800050c:	4013      	ands	r3, r2
 800050e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800051c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000522:	4a04      	ldr	r2, [pc, #16]	; (8000534 <__NVIC_SetPriorityGrouping+0x44>)
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	60d3      	str	r3, [r2, #12]
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <__NVIC_GetPriorityGrouping+0x18>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	f003 0307 	and.w	r3, r3, #7
}
 8000546:	4618      	mov	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	2b00      	cmp	r3, #0
 8000564:	db0b      	blt.n	800057e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	f003 021f 	and.w	r2, r3, #31
 800056c:	4906      	ldr	r1, [pc, #24]	; (8000588 <__NVIC_EnableIRQ+0x34>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	095b      	lsrs	r3, r3, #5
 8000574:	2001      	movs	r0, #1
 8000576:	fa00 f202 	lsl.w	r2, r0, r2
 800057a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	e000e100 	.word	0xe000e100

0800058c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	db0a      	blt.n	80005b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	490c      	ldr	r1, [pc, #48]	; (80005d8 <__NVIC_SetPriority+0x4c>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	0112      	lsls	r2, r2, #4
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	440b      	add	r3, r1
 80005b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005b4:	e00a      	b.n	80005cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4908      	ldr	r1, [pc, #32]	; (80005dc <__NVIC_SetPriority+0x50>)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	3b04      	subs	r3, #4
 80005c4:	0112      	lsls	r2, r2, #4
 80005c6:	b2d2      	uxtb	r2, r2
 80005c8:	440b      	add	r3, r1
 80005ca:	761a      	strb	r2, [r3, #24]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000e100 	.word	0xe000e100
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b089      	sub	sp, #36	; 0x24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f003 0307 	and.w	r3, r3, #7
 80005f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	f1c3 0307 	rsb	r3, r3, #7
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	bf28      	it	cs
 80005fe:	2304      	movcs	r3, #4
 8000600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	3304      	adds	r3, #4
 8000606:	2b06      	cmp	r3, #6
 8000608:	d902      	bls.n	8000610 <NVIC_EncodePriority+0x30>
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	3b03      	subs	r3, #3
 800060e:	e000      	b.n	8000612 <NVIC_EncodePriority+0x32>
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	43da      	mvns	r2, r3
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	401a      	ands	r2, r3
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000628:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	fa01 f303 	lsl.w	r3, r1, r3
 8000632:	43d9      	mvns	r1, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000638:	4313      	orrs	r3, r2
         );
}
 800063a:	4618      	mov	r0, r3
 800063c:	3724      	adds	r7, #36	; 0x24
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ff4f 	bl	80004f0 <__NVIC_SetPriorityGrouping>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800065a:	b580      	push	{r7, lr}
 800065c:	b086      	sub	sp, #24
 800065e:	af00      	add	r7, sp, #0
 8000660:	4603      	mov	r3, r0
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800066c:	f7ff ff64 	bl	8000538 <__NVIC_GetPriorityGrouping>
 8000670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	68b9      	ldr	r1, [r7, #8]
 8000676:	6978      	ldr	r0, [r7, #20]
 8000678:	f7ff ffb2 	bl	80005e0 <NVIC_EncodePriority>
 800067c:	4602      	mov	r2, r0
 800067e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff81 	bl	800058c <__NVIC_SetPriority>
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff57 	bl	8000554 <__NVIC_EnableIRQ>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b08b      	sub	sp, #44	; 0x2c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006c2:	e169      	b.n	8000998 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006c4:	2201      	movs	r2, #1
 80006c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	69fa      	ldr	r2, [r7, #28]
 80006d4:	4013      	ands	r3, r2
 80006d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	429a      	cmp	r2, r3
 80006de:	f040 8158 	bne.w	8000992 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	4a9a      	ldr	r2, [pc, #616]	; (8000950 <HAL_GPIO_Init+0x2a0>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d05e      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
 80006ec:	4a98      	ldr	r2, [pc, #608]	; (8000950 <HAL_GPIO_Init+0x2a0>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d875      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 80006f2:	4a98      	ldr	r2, [pc, #608]	; (8000954 <HAL_GPIO_Init+0x2a4>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d058      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
 80006f8:	4a96      	ldr	r2, [pc, #600]	; (8000954 <HAL_GPIO_Init+0x2a4>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d86f      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 80006fe:	4a96      	ldr	r2, [pc, #600]	; (8000958 <HAL_GPIO_Init+0x2a8>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d052      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
 8000704:	4a94      	ldr	r2, [pc, #592]	; (8000958 <HAL_GPIO_Init+0x2a8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d869      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 800070a:	4a94      	ldr	r2, [pc, #592]	; (800095c <HAL_GPIO_Init+0x2ac>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d04c      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
 8000710:	4a92      	ldr	r2, [pc, #584]	; (800095c <HAL_GPIO_Init+0x2ac>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d863      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 8000716:	4a92      	ldr	r2, [pc, #584]	; (8000960 <HAL_GPIO_Init+0x2b0>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d046      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
 800071c:	4a90      	ldr	r2, [pc, #576]	; (8000960 <HAL_GPIO_Init+0x2b0>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d85d      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 8000722:	2b12      	cmp	r3, #18
 8000724:	d82a      	bhi.n	800077c <HAL_GPIO_Init+0xcc>
 8000726:	2b12      	cmp	r3, #18
 8000728:	d859      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 800072a:	a201      	add	r2, pc, #4	; (adr r2, 8000730 <HAL_GPIO_Init+0x80>)
 800072c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000730:	080007ab 	.word	0x080007ab
 8000734:	08000785 	.word	0x08000785
 8000738:	08000797 	.word	0x08000797
 800073c:	080007d9 	.word	0x080007d9
 8000740:	080007df 	.word	0x080007df
 8000744:	080007df 	.word	0x080007df
 8000748:	080007df 	.word	0x080007df
 800074c:	080007df 	.word	0x080007df
 8000750:	080007df 	.word	0x080007df
 8000754:	080007df 	.word	0x080007df
 8000758:	080007df 	.word	0x080007df
 800075c:	080007df 	.word	0x080007df
 8000760:	080007df 	.word	0x080007df
 8000764:	080007df 	.word	0x080007df
 8000768:	080007df 	.word	0x080007df
 800076c:	080007df 	.word	0x080007df
 8000770:	080007df 	.word	0x080007df
 8000774:	0800078d 	.word	0x0800078d
 8000778:	080007a1 	.word	0x080007a1
 800077c:	4a79      	ldr	r2, [pc, #484]	; (8000964 <HAL_GPIO_Init+0x2b4>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d013      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000782:	e02c      	b.n	80007de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	623b      	str	r3, [r7, #32]
          break;
 800078a:	e029      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	3304      	adds	r3, #4
 8000792:	623b      	str	r3, [r7, #32]
          break;
 8000794:	e024      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	3308      	adds	r3, #8
 800079c:	623b      	str	r3, [r7, #32]
          break;
 800079e:	e01f      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	330c      	adds	r3, #12
 80007a6:	623b      	str	r3, [r7, #32]
          break;
 80007a8:	e01a      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d102      	bne.n	80007b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007b2:	2304      	movs	r3, #4
 80007b4:	623b      	str	r3, [r7, #32]
          break;
 80007b6:	e013      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d105      	bne.n	80007cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007c0:	2308      	movs	r3, #8
 80007c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	611a      	str	r2, [r3, #16]
          break;
 80007ca:	e009      	b.n	80007e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007cc:	2308      	movs	r3, #8
 80007ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	69fa      	ldr	r2, [r7, #28]
 80007d4:	615a      	str	r2, [r3, #20]
          break;
 80007d6:	e003      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
          break;
 80007dc:	e000      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          break;
 80007de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	2bff      	cmp	r3, #255	; 0xff
 80007e4:	d801      	bhi.n	80007ea <HAL_GPIO_Init+0x13a>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	e001      	b.n	80007ee <HAL_GPIO_Init+0x13e>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3304      	adds	r3, #4
 80007ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	2bff      	cmp	r3, #255	; 0xff
 80007f4:	d802      	bhi.n	80007fc <HAL_GPIO_Init+0x14c>
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	e002      	b.n	8000802 <HAL_GPIO_Init+0x152>
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	3b08      	subs	r3, #8
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	210f      	movs	r1, #15
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	fa01 f303 	lsl.w	r3, r1, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	401a      	ands	r2, r3
 8000814:	6a39      	ldr	r1, [r7, #32]
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	431a      	orrs	r2, r3
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	2b00      	cmp	r3, #0
 800082c:	f000 80b1 	beq.w	8000992 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000830:	4b4d      	ldr	r3, [pc, #308]	; (8000968 <HAL_GPIO_Init+0x2b8>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a4c      	ldr	r2, [pc, #304]	; (8000968 <HAL_GPIO_Init+0x2b8>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b4a      	ldr	r3, [pc, #296]	; (8000968 <HAL_GPIO_Init+0x2b8>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000848:	4a48      	ldr	r2, [pc, #288]	; (800096c <HAL_GPIO_Init+0x2bc>)
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	089b      	lsrs	r3, r3, #2
 800084e:	3302      	adds	r3, #2
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	f003 0303 	and.w	r3, r3, #3
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	220f      	movs	r2, #15
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a40      	ldr	r2, [pc, #256]	; (8000970 <HAL_GPIO_Init+0x2c0>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d013      	beq.n	800089c <HAL_GPIO_Init+0x1ec>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a3f      	ldr	r2, [pc, #252]	; (8000974 <HAL_GPIO_Init+0x2c4>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d00d      	beq.n	8000898 <HAL_GPIO_Init+0x1e8>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a3e      	ldr	r2, [pc, #248]	; (8000978 <HAL_GPIO_Init+0x2c8>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d007      	beq.n	8000894 <HAL_GPIO_Init+0x1e4>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a3d      	ldr	r2, [pc, #244]	; (800097c <HAL_GPIO_Init+0x2cc>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d101      	bne.n	8000890 <HAL_GPIO_Init+0x1e0>
 800088c:	2303      	movs	r3, #3
 800088e:	e006      	b.n	800089e <HAL_GPIO_Init+0x1ee>
 8000890:	2304      	movs	r3, #4
 8000892:	e004      	b.n	800089e <HAL_GPIO_Init+0x1ee>
 8000894:	2302      	movs	r3, #2
 8000896:	e002      	b.n	800089e <HAL_GPIO_Init+0x1ee>
 8000898:	2301      	movs	r3, #1
 800089a:	e000      	b.n	800089e <HAL_GPIO_Init+0x1ee>
 800089c:	2300      	movs	r3, #0
 800089e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a0:	f002 0203 	and.w	r2, r2, #3
 80008a4:	0092      	lsls	r2, r2, #2
 80008a6:	4093      	lsls	r3, r2
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008ae:	492f      	ldr	r1, [pc, #188]	; (800096c <HAL_GPIO_Init+0x2bc>)
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	089b      	lsrs	r3, r3, #2
 80008b4:	3302      	adds	r3, #2
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d006      	beq.n	80008d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008c8:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	492c      	ldr	r1, [pc, #176]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	600b      	str	r3, [r1, #0]
 80008d4:	e006      	b.n	80008e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	43db      	mvns	r3, r3
 80008de:	4928      	ldr	r1, [pc, #160]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008e0:	4013      	ands	r3, r2
 80008e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d006      	beq.n	80008fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	4922      	ldr	r1, [pc, #136]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	604b      	str	r3, [r1, #4]
 80008fc:	e006      	b.n	800090c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	43db      	mvns	r3, r3
 8000906:	491e      	ldr	r1, [pc, #120]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000908:	4013      	ands	r3, r2
 800090a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d006      	beq.n	8000926 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	4918      	ldr	r1, [pc, #96]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	608b      	str	r3, [r1, #8]
 8000924:	e006      	b.n	8000934 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	43db      	mvns	r3, r3
 800092e:	4914      	ldr	r1, [pc, #80]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000930:	4013      	ands	r3, r2
 8000932:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d021      	beq.n	8000984 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	490e      	ldr	r1, [pc, #56]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4313      	orrs	r3, r2
 800094a:	60cb      	str	r3, [r1, #12]
 800094c:	e021      	b.n	8000992 <HAL_GPIO_Init+0x2e2>
 800094e:	bf00      	nop
 8000950:	10320000 	.word	0x10320000
 8000954:	10310000 	.word	0x10310000
 8000958:	10220000 	.word	0x10220000
 800095c:	10210000 	.word	0x10210000
 8000960:	10120000 	.word	0x10120000
 8000964:	10110000 	.word	0x10110000
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00
 8000978:	40011000 	.word	0x40011000
 800097c:	40011400 	.word	0x40011400
 8000980:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_GPIO_Init+0x304>)
 8000986:	68da      	ldr	r2, [r3, #12]
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	43db      	mvns	r3, r3
 800098c:	4909      	ldr	r1, [pc, #36]	; (80009b4 <HAL_GPIO_Init+0x304>)
 800098e:	4013      	ands	r3, r2
 8000990:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	3301      	adds	r3, #1
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	fa22 f303 	lsr.w	r3, r2, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f47f ae8e 	bne.w	80006c4 <HAL_GPIO_Init+0x14>
  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	372c      	adds	r7, #44	; 0x2c
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	40010400 	.word	0x40010400

080009b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	807b      	strh	r3, [r7, #2]
 80009c4:	4613      	mov	r3, r2
 80009c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009c8:	787b      	ldrb	r3, [r7, #1]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009ce:	887a      	ldrh	r2, [r7, #2]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009d4:	e003      	b.n	80009de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009d6:	887b      	ldrh	r3, [r7, #2]
 80009d8:	041a      	lsls	r2, r3, #16
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	611a      	str	r2, [r3, #16]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d101      	bne.n	80009fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e26c      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 8087 	beq.w	8000b16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a08:	4b92      	ldr	r3, [pc, #584]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 030c 	and.w	r3, r3, #12
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d00c      	beq.n	8000a2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a14:	4b8f      	ldr	r3, [pc, #572]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 030c 	and.w	r3, r3, #12
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d112      	bne.n	8000a46 <HAL_RCC_OscConfig+0x5e>
 8000a20:	4b8c      	ldr	r3, [pc, #560]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a2c:	d10b      	bne.n	8000a46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a2e:	4b89      	ldr	r3, [pc, #548]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d06c      	beq.n	8000b14 <HAL_RCC_OscConfig+0x12c>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d168      	bne.n	8000b14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e246      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a4e:	d106      	bne.n	8000a5e <HAL_RCC_OscConfig+0x76>
 8000a50:	4b80      	ldr	r3, [pc, #512]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a7f      	ldr	r2, [pc, #508]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	e02e      	b.n	8000abc <HAL_RCC_OscConfig+0xd4>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10c      	bne.n	8000a80 <HAL_RCC_OscConfig+0x98>
 8000a66:	4b7b      	ldr	r3, [pc, #492]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a7a      	ldr	r2, [pc, #488]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	4b78      	ldr	r3, [pc, #480]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a77      	ldr	r2, [pc, #476]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	e01d      	b.n	8000abc <HAL_RCC_OscConfig+0xd4>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a88:	d10c      	bne.n	8000aa4 <HAL_RCC_OscConfig+0xbc>
 8000a8a:	4b72      	ldr	r3, [pc, #456]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a71      	ldr	r2, [pc, #452]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	4b6f      	ldr	r3, [pc, #444]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a6e      	ldr	r2, [pc, #440]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aa0:	6013      	str	r3, [r2, #0]
 8000aa2:	e00b      	b.n	8000abc <HAL_RCC_OscConfig+0xd4>
 8000aa4:	4b6b      	ldr	r3, [pc, #428]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a6a      	ldr	r2, [pc, #424]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b68      	ldr	r3, [pc, #416]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a67      	ldr	r2, [pc, #412]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d013      	beq.n	8000aec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac4:	f7ff fce6 	bl	8000494 <HAL_GetTick>
 8000ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aca:	e008      	b.n	8000ade <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000acc:	f7ff fce2 	bl	8000494 <HAL_GetTick>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	2b64      	cmp	r3, #100	; 0x64
 8000ad8:	d901      	bls.n	8000ade <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ada:	2303      	movs	r3, #3
 8000adc:	e1fa      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ade:	4b5d      	ldr	r3, [pc, #372]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0f0      	beq.n	8000acc <HAL_RCC_OscConfig+0xe4>
 8000aea:	e014      	b.n	8000b16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aec:	f7ff fcd2 	bl	8000494 <HAL_GetTick>
 8000af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af2:	e008      	b.n	8000b06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000af4:	f7ff fcce 	bl	8000494 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b64      	cmp	r3, #100	; 0x64
 8000b00:	d901      	bls.n	8000b06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b02:	2303      	movs	r3, #3
 8000b04:	e1e6      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f0      	bne.n	8000af4 <HAL_RCC_OscConfig+0x10c>
 8000b12:	e000      	b.n	8000b16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d063      	beq.n	8000bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b22:	4b4c      	ldr	r3, [pc, #304]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d00b      	beq.n	8000b46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b2e:	4b49      	ldr	r3, [pc, #292]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d11c      	bne.n	8000b74 <HAL_RCC_OscConfig+0x18c>
 8000b3a:	4b46      	ldr	r3, [pc, #280]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d116      	bne.n	8000b74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b46:	4b43      	ldr	r3, [pc, #268]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d005      	beq.n	8000b5e <HAL_RCC_OscConfig+0x176>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d001      	beq.n	8000b5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e1ba      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b5e:	4b3d      	ldr	r3, [pc, #244]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4939      	ldr	r1, [pc, #228]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b72:	e03a      	b.n	8000bea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d020      	beq.n	8000bbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b7c:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <HAL_RCC_OscConfig+0x270>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b82:	f7ff fc87 	bl	8000494 <HAL_GetTick>
 8000b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b88:	e008      	b.n	8000b9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b8a:	f7ff fc83 	bl	8000494 <HAL_GetTick>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d901      	bls.n	8000b9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e19b      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f0      	beq.n	8000b8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4927      	ldr	r1, [pc, #156]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	600b      	str	r3, [r1, #0]
 8000bbc:	e015      	b.n	8000bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <HAL_RCC_OscConfig+0x270>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fc66 	bl	8000494 <HAL_GetTick>
 8000bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bca:	e008      	b.n	8000bde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bcc:	f7ff fc62 	bl	8000494 <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d901      	bls.n	8000bde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e17a      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f0      	bne.n	8000bcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d03a      	beq.n	8000c6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d019      	beq.n	8000c32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_RCC_OscConfig+0x274>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c04:	f7ff fc46 	bl	8000494 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c0c:	f7ff fc42 	bl	8000494 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e15a      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f0      	beq.n	8000c0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f000 faf4 	bl	8001218 <RCC_Delay>
 8000c30:	e01c      	b.n	8000c6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_RCC_OscConfig+0x274>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c38:	f7ff fc2c 	bl	8000494 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c3e:	e00f      	b.n	8000c60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c40:	f7ff fc28 	bl	8000494 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d908      	bls.n	8000c60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e140      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000
 8000c58:	42420000 	.word	0x42420000
 8000c5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c60:	4b9e      	ldr	r3, [pc, #632]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1e9      	bne.n	8000c40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 80a6 	beq.w	8000dc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c7e:	4b97      	ldr	r3, [pc, #604]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10d      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b94      	ldr	r3, [pc, #592]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a93      	ldr	r2, [pc, #588]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b91      	ldr	r3, [pc, #580]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca6:	4b8e      	ldr	r3, [pc, #568]	; (8000ee0 <HAL_RCC_OscConfig+0x4f8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d118      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cb2:	4b8b      	ldr	r3, [pc, #556]	; (8000ee0 <HAL_RCC_OscConfig+0x4f8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a8a      	ldr	r2, [pc, #552]	; (8000ee0 <HAL_RCC_OscConfig+0x4f8>)
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fbe9 	bl	8000494 <HAL_GetTick>
 8000cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cc6:	f7ff fbe5 	bl	8000494 <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b64      	cmp	r3, #100	; 0x64
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e0fd      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd8:	4b81      	ldr	r3, [pc, #516]	; (8000ee0 <HAL_RCC_OscConfig+0x4f8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f0      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d106      	bne.n	8000cfa <HAL_RCC_OscConfig+0x312>
 8000cec:	4b7b      	ldr	r3, [pc, #492]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	4a7a      	ldr	r2, [pc, #488]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6213      	str	r3, [r2, #32]
 8000cf8:	e02d      	b.n	8000d56 <HAL_RCC_OscConfig+0x36e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x334>
 8000d02:	4b76      	ldr	r3, [pc, #472]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d04:	6a1b      	ldr	r3, [r3, #32]
 8000d06:	4a75      	ldr	r2, [pc, #468]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d08:	f023 0301 	bic.w	r3, r3, #1
 8000d0c:	6213      	str	r3, [r2, #32]
 8000d0e:	4b73      	ldr	r3, [pc, #460]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d10:	6a1b      	ldr	r3, [r3, #32]
 8000d12:	4a72      	ldr	r2, [pc, #456]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d14:	f023 0304 	bic.w	r3, r3, #4
 8000d18:	6213      	str	r3, [r2, #32]
 8000d1a:	e01c      	b.n	8000d56 <HAL_RCC_OscConfig+0x36e>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	2b05      	cmp	r3, #5
 8000d22:	d10c      	bne.n	8000d3e <HAL_RCC_OscConfig+0x356>
 8000d24:	4b6d      	ldr	r3, [pc, #436]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	4a6c      	ldr	r2, [pc, #432]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6213      	str	r3, [r2, #32]
 8000d30:	4b6a      	ldr	r3, [pc, #424]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	4a69      	ldr	r2, [pc, #420]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6213      	str	r3, [r2, #32]
 8000d3c:	e00b      	b.n	8000d56 <HAL_RCC_OscConfig+0x36e>
 8000d3e:	4b67      	ldr	r3, [pc, #412]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	4a66      	ldr	r2, [pc, #408]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d44:	f023 0301 	bic.w	r3, r3, #1
 8000d48:	6213      	str	r3, [r2, #32]
 8000d4a:	4b64      	ldr	r3, [pc, #400]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	4a63      	ldr	r2, [pc, #396]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d50:	f023 0304 	bic.w	r3, r3, #4
 8000d54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d015      	beq.n	8000d8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d5e:	f7ff fb99 	bl	8000494 <HAL_GetTick>
 8000d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d64:	e00a      	b.n	8000d7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d66:	f7ff fb95 	bl	8000494 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e0ab      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7c:	4b57      	ldr	r3, [pc, #348]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0ee      	beq.n	8000d66 <HAL_RCC_OscConfig+0x37e>
 8000d88:	e014      	b.n	8000db4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8a:	f7ff fb83 	bl	8000494 <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d90:	e00a      	b.n	8000da8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d92:	f7ff fb7f 	bl	8000494 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e095      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000da8:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1ee      	bne.n	8000d92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d105      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dba:	4b48      	ldr	r3, [pc, #288]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a47      	ldr	r2, [pc, #284]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 8081 	beq.w	8000ed2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dd0:	4b42      	ldr	r3, [pc, #264]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 030c 	and.w	r3, r3, #12
 8000dd8:	2b08      	cmp	r3, #8
 8000dda:	d061      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d146      	bne.n	8000e72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000de4:	4b3f      	ldr	r3, [pc, #252]	; (8000ee4 <HAL_RCC_OscConfig+0x4fc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dea:	f7ff fb53 	bl	8000494 <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df2:	f7ff fb4f 	bl	8000494 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e067      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e04:	4b35      	ldr	r3, [pc, #212]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f0      	bne.n	8000df2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e18:	d108      	bne.n	8000e2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e1a:	4b30      	ldr	r3, [pc, #192]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	492d      	ldr	r1, [pc, #180]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a19      	ldr	r1, [r3, #32]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	4927      	ldr	r1, [pc, #156]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e44:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <HAL_RCC_OscConfig+0x4fc>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fb23 	bl	8000494 <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e52:	f7ff fb1f 	bl	8000494 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e037      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_RCC_OscConfig+0x46a>
 8000e70:	e02f      	b.n	8000ed2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_RCC_OscConfig+0x4fc>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e78:	f7ff fb0c 	bl	8000494 <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e80:	f7ff fb08 	bl	8000494 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e020      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f0      	bne.n	8000e80 <HAL_RCC_OscConfig+0x498>
 8000e9e:	e018      	b.n	8000ed2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d101      	bne.n	8000eac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e013      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_RCC_OscConfig+0x4f4>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d106      	bne.n	8000ece <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d001      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40007000 	.word	0x40007000
 8000ee4:	42420060 	.word	0x42420060

08000ee8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e0d0      	b.n	800109e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000efc:	4b6a      	ldr	r3, [pc, #424]	; (80010a8 <HAL_RCC_ClockConfig+0x1c0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d910      	bls.n	8000f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f0a:	4b67      	ldr	r3, [pc, #412]	; (80010a8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f023 0207 	bic.w	r2, r3, #7
 8000f12:	4965      	ldr	r1, [pc, #404]	; (80010a8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f1a:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d001      	beq.n	8000f2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e0b8      	b.n	800109e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d020      	beq.n	8000f7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d005      	beq.n	8000f50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f44:	4b59      	ldr	r3, [pc, #356]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4a58      	ldr	r2, [pc, #352]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f5c:	4b53      	ldr	r3, [pc, #332]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	4a52      	ldr	r2, [pc, #328]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000f62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f68:	4b50      	ldr	r3, [pc, #320]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	494d      	ldr	r1, [pc, #308]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d040      	beq.n	8001008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d107      	bne.n	8000f9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	4b47      	ldr	r3, [pc, #284]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d115      	bne.n	8000fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e07f      	b.n	800109e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d107      	bne.n	8000fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d109      	bne.n	8000fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e073      	b.n	800109e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb6:	4b3d      	ldr	r3, [pc, #244]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e06b      	b.n	800109e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fc6:	4b39      	ldr	r3, [pc, #228]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f023 0203 	bic.w	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4936      	ldr	r1, [pc, #216]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fd8:	f7ff fa5c 	bl	8000494 <HAL_GetTick>
 8000fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fde:	e00a      	b.n	8000ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe0:	f7ff fa58 	bl	8000494 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e053      	b.n	800109e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 020c 	and.w	r2, r3, #12
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	429a      	cmp	r2, r3
 8001006:	d1eb      	bne.n	8000fe0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_RCC_ClockConfig+0x1c0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	d210      	bcs.n	8001038 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 0207 	bic.w	r2, r3, #7
 800101e:	4922      	ldr	r1, [pc, #136]	; (80010a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	4313      	orrs	r3, r2
 8001024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d001      	beq.n	8001038 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e032      	b.n	800109e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	2b00      	cmp	r3, #0
 8001042:	d008      	beq.n	8001056 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	4916      	ldr	r1, [pc, #88]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d009      	beq.n	8001076 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	490e      	ldr	r1, [pc, #56]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 8001072:	4313      	orrs	r3, r2
 8001074:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001076:	f000 f821 	bl	80010bc <HAL_RCC_GetSysClockFreq>
 800107a:	4602      	mov	r2, r0
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	490a      	ldr	r1, [pc, #40]	; (80010b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001088:	5ccb      	ldrb	r3, [r1, r3]
 800108a:	fa22 f303 	lsr.w	r3, r2, r3
 800108e:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f932 	bl	8000300 <HAL_InitTick>

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40022000 	.word	0x40022000
 80010ac:	40021000 	.word	0x40021000
 80010b0:	08001768 	.word	0x08001768
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010bc:	b490      	push	{r4, r7}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <HAL_RCC_GetSysClockFreq+0xb0>)
 80010c4:	1d3c      	adds	r4, r7, #4
 80010c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010cc:	f240 2301 	movw	r3, #513	; 0x201
 80010d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d002      	beq.n	80010fc <HAL_RCC_GetSysClockFreq+0x40>
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d003      	beq.n	8001102 <HAL_RCC_GetSysClockFreq+0x46>
 80010fa:	e02d      	b.n	8001158 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_RCC_GetSysClockFreq+0xb8>)
 80010fe:	623b      	str	r3, [r7, #32]
      break;
 8001100:	e02d      	b.n	800115e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	0c9b      	lsrs	r3, r3, #18
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800110e:	4413      	add	r3, r2
 8001110:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001114:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	0c5b      	lsrs	r3, r3, #17
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800112e:	4413      	add	r3, r2
 8001130:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001134:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_RCC_GetSysClockFreq+0xb8>)
 800113a:	fb02 f203 	mul.w	r2, r2, r3
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	fbb2 f3f3 	udiv	r3, r2, r3
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	e004      	b.n	8001152 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <HAL_RCC_GetSysClockFreq+0xbc>)
 800114c:	fb02 f303 	mul.w	r3, r2, r3
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	623b      	str	r3, [r7, #32]
      break;
 8001156:	e002      	b.n	800115e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_RCC_GetSysClockFreq+0xb8>)
 800115a:	623b      	str	r3, [r7, #32]
      break;
 800115c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800115e:	6a3b      	ldr	r3, [r7, #32]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bc90      	pop	{r4, r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	08001758 	.word	0x08001758
 8001170:	40021000 	.word	0x40021000
 8001174:	007a1200 	.word	0x007a1200
 8001178:	003d0900 	.word	0x003d0900

0800117c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <HAL_RCC_GetHCLKFreq+0x10>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	20000000 	.word	0x20000000

08001190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001194:	f7ff fff2 	bl	800117c <HAL_RCC_GetHCLKFreq>
 8001198:	4602      	mov	r2, r0
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	4903      	ldr	r1, [pc, #12]	; (80011b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011a6:	5ccb      	ldrb	r3, [r1, r3]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021000 	.word	0x40021000
 80011b4:	08001778 	.word	0x08001778

080011b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	220f      	movs	r2, #15
 80011c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_RCC_GetClockConfig+0x58>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_RCC_GetClockConfig+0x58>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_RCC_GetClockConfig+0x58>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_RCC_GetClockConfig+0x58>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	08db      	lsrs	r3, r3, #3
 80011f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_RCC_GetClockConfig+0x5c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0207 	and.w	r2, r3, #7
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000
 8001214:	40022000 	.word	0x40022000

08001218 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <RCC_Delay+0x34>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <RCC_Delay+0x38>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0a5b      	lsrs	r3, r3, #9
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	fb02 f303 	mul.w	r3, r2, r3
 8001232:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001234:	bf00      	nop
  }
  while (Delay --);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1e5a      	subs	r2, r3, #1
 800123a:	60fa      	str	r2, [r7, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f9      	bne.n	8001234 <RCC_Delay+0x1c>
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	20000000 	.word	0x20000000
 8001250:	10624dd3 	.word	0x10624dd3

08001254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e041      	b.n	80012ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d106      	bne.n	8001280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f839 	bl	80012f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2202      	movs	r2, #2
 8001284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3304      	adds	r3, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4610      	mov	r0, r2
 8001294:	f000 f9b4 	bl	8001600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d001      	beq.n	800131c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e03a      	b.n	8001392 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a18      	ldr	r2, [pc, #96]	; (800139c <HAL_TIM_Base_Start_IT+0x98>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00e      	beq.n	800135c <HAL_TIM_Base_Start_IT+0x58>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001346:	d009      	beq.n	800135c <HAL_TIM_Base_Start_IT+0x58>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d004      	beq.n	800135c <HAL_TIM_Base_Start_IT+0x58>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d111      	bne.n	8001380 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b06      	cmp	r3, #6
 800136c:	d010      	beq.n	8001390 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800137e:	e007      	b.n	8001390 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0201 	orr.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	40012c00 	.word	0x40012c00
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40000800 	.word	0x40000800

080013a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d122      	bne.n	8001404 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d11b      	bne.n	8001404 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f06f 0202 	mvn.w	r2, #2
 80013d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f8ed 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 80013f0:	e005      	b.n	80013fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f8e0 	bl	80015b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f8ef 	bl	80015dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b04      	cmp	r3, #4
 8001410:	d122      	bne.n	8001458 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b04      	cmp	r3, #4
 800141e:	d11b      	bne.n	8001458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f06f 0204 	mvn.w	r2, #4
 8001428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2202      	movs	r2, #2
 800142e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f8c3 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 8001444:	e005      	b.n	8001452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f8b6 	bl	80015b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f8c5 	bl	80015dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b08      	cmp	r3, #8
 8001464:	d122      	bne.n	80014ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b08      	cmp	r3, #8
 8001472:	d11b      	bne.n	80014ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f06f 0208 	mvn.w	r2, #8
 800147c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2204      	movs	r2, #4
 8001482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f899 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 8001498:	e005      	b.n	80014a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f88c 	bl	80015b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f89b 	bl	80015dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	2b10      	cmp	r3, #16
 80014b8:	d122      	bne.n	8001500 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b10      	cmp	r3, #16
 80014c6:	d11b      	bne.n	8001500 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f06f 0210 	mvn.w	r2, #16
 80014d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2208      	movs	r2, #8
 80014d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f86f 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 80014ec:	e005      	b.n	80014fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f862 	bl	80015b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f871 	bl	80015dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b01      	cmp	r3, #1
 800150c:	d10e      	bne.n	800152c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d107      	bne.n	800152c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f06f 0201 	mvn.w	r2, #1
 8001524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7fe fea0 	bl	800026c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001536:	2b80      	cmp	r3, #128	; 0x80
 8001538:	d10e      	bne.n	8001558 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001544:	2b80      	cmp	r3, #128	; 0x80
 8001546:	d107      	bne.n	8001558 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f8bf 	bl	80016d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001562:	2b40      	cmp	r3, #64	; 0x40
 8001564:	d10e      	bne.n	8001584 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001570:	2b40      	cmp	r3, #64	; 0x40
 8001572:	d107      	bne.n	8001584 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800157c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f835 	bl	80015ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	2b20      	cmp	r3, #32
 8001590:	d10e      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	2b20      	cmp	r3, #32
 800159e:	d107      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f06f 0220 	mvn.w	r2, #32
 80015a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f88a 	bl	80016c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a29      	ldr	r2, [pc, #164]	; (80016b8 <TIM_Base_SetConfig+0xb8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d00b      	beq.n	8001630 <TIM_Base_SetConfig+0x30>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161e:	d007      	beq.n	8001630 <TIM_Base_SetConfig+0x30>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a26      	ldr	r2, [pc, #152]	; (80016bc <TIM_Base_SetConfig+0xbc>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d003      	beq.n	8001630 <TIM_Base_SetConfig+0x30>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <TIM_Base_SetConfig+0xc0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d108      	bne.n	8001642 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <TIM_Base_SetConfig+0xb8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00b      	beq.n	8001662 <TIM_Base_SetConfig+0x62>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001650:	d007      	beq.n	8001662 <TIM_Base_SetConfig+0x62>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <TIM_Base_SetConfig+0xbc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d003      	beq.n	8001662 <TIM_Base_SetConfig+0x62>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <TIM_Base_SetConfig+0xc0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d108      	bne.n	8001674 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <TIM_Base_SetConfig+0xb8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d103      	bne.n	80016a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	615a      	str	r2, [r3, #20]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40012c00 	.word	0x40012c00
 80016bc:	40000400 	.word	0x40000400
 80016c0:	40000800 	.word	0x40000800

080016c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <__libc_init_array>:
 80016e8:	b570      	push	{r4, r5, r6, lr}
 80016ea:	2600      	movs	r6, #0
 80016ec:	4d0c      	ldr	r5, [pc, #48]	; (8001720 <__libc_init_array+0x38>)
 80016ee:	4c0d      	ldr	r4, [pc, #52]	; (8001724 <__libc_init_array+0x3c>)
 80016f0:	1b64      	subs	r4, r4, r5
 80016f2:	10a4      	asrs	r4, r4, #2
 80016f4:	42a6      	cmp	r6, r4
 80016f6:	d109      	bne.n	800170c <__libc_init_array+0x24>
 80016f8:	f000 f822 	bl	8001740 <_init>
 80016fc:	2600      	movs	r6, #0
 80016fe:	4d0a      	ldr	r5, [pc, #40]	; (8001728 <__libc_init_array+0x40>)
 8001700:	4c0a      	ldr	r4, [pc, #40]	; (800172c <__libc_init_array+0x44>)
 8001702:	1b64      	subs	r4, r4, r5
 8001704:	10a4      	asrs	r4, r4, #2
 8001706:	42a6      	cmp	r6, r4
 8001708:	d105      	bne.n	8001716 <__libc_init_array+0x2e>
 800170a:	bd70      	pop	{r4, r5, r6, pc}
 800170c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001710:	4798      	blx	r3
 8001712:	3601      	adds	r6, #1
 8001714:	e7ee      	b.n	80016f4 <__libc_init_array+0xc>
 8001716:	f855 3b04 	ldr.w	r3, [r5], #4
 800171a:	4798      	blx	r3
 800171c:	3601      	adds	r6, #1
 800171e:	e7f2      	b.n	8001706 <__libc_init_array+0x1e>
 8001720:	08001780 	.word	0x08001780
 8001724:	08001780 	.word	0x08001780
 8001728:	08001780 	.word	0x08001780
 800172c:	08001784 	.word	0x08001784

08001730 <memset>:
 8001730:	4603      	mov	r3, r0
 8001732:	4402      	add	r2, r0
 8001734:	4293      	cmp	r3, r2
 8001736:	d100      	bne.n	800173a <memset+0xa>
 8001738:	4770      	bx	lr
 800173a:	f803 1b01 	strb.w	r1, [r3], #1
 800173e:	e7f9      	b.n	8001734 <memset+0x4>

08001740 <_init>:
 8001740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001742:	bf00      	nop
 8001744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001746:	bc08      	pop	{r3}
 8001748:	469e      	mov	lr, r3
 800174a:	4770      	bx	lr

0800174c <_fini>:
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174e:	bf00      	nop
 8001750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001752:	bc08      	pop	{r3}
 8001754:	469e      	mov	lr, r3
 8001756:	4770      	bx	lr
